// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  fullName    String      // User's display name  
  email       String      @unique // Email as login identifier
  passwordHash String?     // Optional for transition period - users can have password OR passkey
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  credentials Credential[] // WebAuthn credentials (for future passkey upgrade)
  memberships Membership[] // Organization memberships
  invitedUsers Membership[] @relation("InvitedBy") // Users this user invited
  deliveries  Delivery[]   // Deliveries started by this user
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   // Multiple credentials per user allowed
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)
  
  @@index([credentialId])
  @@index([userId])
}

// Multi-tenant core models

model Organization {
  id          String @id @default(uuid())
  name        String
  slug        String @unique // For URLs: /org/acme-warehouse
  settings    String? // JSON string for SQLite compatibility
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  memberships Membership[]
}

model Membership {
  id              String @id @default(uuid())
  role            Role   @default(MEMBER)
  userId          String
  organizationId  String
  invitedById     String?
  createdAt       DateTime @default(now())
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User? @relation("InvitedBy", fields: [invitedById], references: [id])
  
  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

// Warehouse models for truckload management

model Delivery {
  id            String   @id @default(uuid())
  easleyProNumber String? // Easley Pro # from TMS (Order Number)
  truckNumber   String?  // Optional truck identifier (e.g., "TR-4471")
  trailerNumber String?  // Trailer number from BOL
  sealNumber    String?  // Seal number from BOL
  bolNumber     String?  // Bill of Lading number
  notes         String?  // General notes about this truckload
  status        DeliveryStatus @default(ACTIVE)
  userId        String   // Who started this delivery
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pallets Pallet[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt]) // For dashboard sorting
}

model Pallet {
  id            String      @id @default(uuid())
  licensePlate  String      // LP - License Plate identifier (e.g., "123456")
  deliveryId    String      // Which truckload this belongs to
  status        PalletStatus @default(RECEIVED)
  location      String?     // Storage location (e.g., "A-12-3")
  pieceCount    Int?        // Number of pieces on this pallet
  notes         String?     // Pallet-specific notes (damage, etc)
  scannedAt     DateTime    @default(now())
  
  // Relations
  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  pieces   Piece[]
  
  @@index([deliveryId])
  @@index([licensePlate])
}

model Piece {
  id             String   @id @default(uuid())
  palletId       String   // Which pallet this piece belongs to
  partNumber     String   // Part number (e.g., "2912-20")
  description    String   // Part description (e.g., "Mitre saws")
  poNumber       String?  // PO number (e.g., "320425770")
  quantity       Int?     // Quantity of this part
  barcode        String?  // Barcode on the piece label
  notes          String?  // Piece-specific notes (damage, open box, etc)
  createdAt      DateTime @default(now())
  
  // Relations
  pallet Pallet @relation(fields: [palletId], references: [id], onDelete: Cascade)
  
  @@index([palletId])
  @@index([partNumber])
}

enum DeliveryStatus {
  ACTIVE      // Currently receiving pallets
  COMPLETED   // All pallets received and stored
  PAUSED      // Temporarily stopped
}

enum PalletStatus {
  RECEIVED    // Pallet scanned and confirmed
  STAGED      // Pallet waiting for storage location
  STORED      // Pallet placed in final location
}